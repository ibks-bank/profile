// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Passport is an object representing the database table.
type Passport struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Series     string    `boil:"series" json:"series" toml:"series" yaml:"series"`
	Number     string    `boil:"number" json:"number" toml:"number" yaml:"number"`
	FirstName  string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	MiddleName string    `boil:"middle_name" json:"middle_name" toml:"middle_name" yaml:"middle_name"`
	LastName   string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	IssuedBy   string    `boil:"issued_by" json:"issued_by" toml:"issued_by" yaml:"issued_by"`
	IssuedAt   time.Time `boil:"issued_at" json:"issued_at" toml:"issued_at" yaml:"issued_at"`
	Address    string    `boil:"address" json:"address" toml:"address" yaml:"address"`
	Birthplace string    `boil:"birthplace" json:"birthplace" toml:"birthplace" yaml:"birthplace"`
	Birthdate  time.Time `boil:"birthdate" json:"birthdate" toml:"birthdate" yaml:"birthdate"`

	R *passportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L passportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PassportColumns = struct {
	ID         string
	Series     string
	Number     string
	FirstName  string
	MiddleName string
	LastName   string
	IssuedBy   string
	IssuedAt   string
	Address    string
	Birthplace string
	Birthdate  string
}{
	ID:         "id",
	Series:     "series",
	Number:     "number",
	FirstName:  "first_name",
	MiddleName: "middle_name",
	LastName:   "last_name",
	IssuedBy:   "issued_by",
	IssuedAt:   "issued_at",
	Address:    "address",
	Birthplace: "birthplace",
	Birthdate:  "birthdate",
}

var PassportTableColumns = struct {
	ID         string
	Series     string
	Number     string
	FirstName  string
	MiddleName string
	LastName   string
	IssuedBy   string
	IssuedAt   string
	Address    string
	Birthplace string
	Birthdate  string
}{
	ID:         "passports.id",
	Series:     "passports.series",
	Number:     "passports.number",
	FirstName:  "passports.first_name",
	MiddleName: "passports.middle_name",
	LastName:   "passports.last_name",
	IssuedBy:   "passports.issued_by",
	IssuedAt:   "passports.issued_at",
	Address:    "passports.address",
	Birthplace: "passports.birthplace",
	Birthdate:  "passports.birthdate",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PassportWhere = struct {
	ID         whereHelperint64
	Series     whereHelperstring
	Number     whereHelperstring
	FirstName  whereHelperstring
	MiddleName whereHelperstring
	LastName   whereHelperstring
	IssuedBy   whereHelperstring
	IssuedAt   whereHelpertime_Time
	Address    whereHelperstring
	Birthplace whereHelperstring
	Birthdate  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"passports\".\"id\""},
	Series:     whereHelperstring{field: "\"passports\".\"series\""},
	Number:     whereHelperstring{field: "\"passports\".\"number\""},
	FirstName:  whereHelperstring{field: "\"passports\".\"first_name\""},
	MiddleName: whereHelperstring{field: "\"passports\".\"middle_name\""},
	LastName:   whereHelperstring{field: "\"passports\".\"last_name\""},
	IssuedBy:   whereHelperstring{field: "\"passports\".\"issued_by\""},
	IssuedAt:   whereHelpertime_Time{field: "\"passports\".\"issued_at\""},
	Address:    whereHelperstring{field: "\"passports\".\"address\""},
	Birthplace: whereHelperstring{field: "\"passports\".\"birthplace\""},
	Birthdate:  whereHelpertime_Time{field: "\"passports\".\"birthdate\""},
}

// PassportRels is where relationship names are stored.
var PassportRels = struct {
	User string
}{
	User: "User",
}

// passportR is where relationships are stored.
type passportR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*passportR) NewStruct() *passportR {
	return &passportR{}
}

// passportL is where Load methods for each relationship are stored.
type passportL struct{}

var (
	passportAllColumns            = []string{"id", "series", "number", "first_name", "middle_name", "last_name", "issued_by", "issued_at", "address", "birthplace", "birthdate"}
	passportColumnsWithoutDefault = []string{"series", "number", "first_name", "middle_name", "last_name", "issued_by", "issued_at", "address", "birthplace", "birthdate"}
	passportColumnsWithDefault    = []string{"id"}
	passportPrimaryKeyColumns     = []string{"id"}
)

type (
	// PassportSlice is an alias for a slice of pointers to Passport.
	// This should almost always be used instead of []Passport.
	PassportSlice []*Passport

	passportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	passportType                 = reflect.TypeOf(&Passport{})
	passportMapping              = queries.MakeStructMapping(passportType)
	passportPrimaryKeyMapping, _ = queries.BindMapping(passportType, passportMapping, passportPrimaryKeyColumns)
	passportInsertCacheMut       sync.RWMutex
	passportInsertCache          = make(map[string]insertCache)
	passportUpdateCacheMut       sync.RWMutex
	passportUpdateCache          = make(map[string]updateCache)
	passportUpsertCacheMut       sync.RWMutex
	passportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single passport record from the query.
func (q passportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Passport, error) {
	o := &Passport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for passports")
	}

	return o, nil
}

// All returns all Passport records from the query.
func (q passportQuery) All(ctx context.Context, exec boil.ContextExecutor) (PassportSlice, error) {
	var o []*Passport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Passport slice")
	}

	return o, nil
}

// Count returns the count of all Passport records in the query.
func (q passportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count passports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q passportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if passports exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Passport) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"passport_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (passportL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePassport interface{}, mods queries.Applicator) error {
	var slice []*Passport
	var object *Passport

	if singular {
		object = maybePassport.(*Passport)
	} else {
		slice = *maybePassport.(*[]*Passport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &passportR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &passportR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.passport_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Passport = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.PassportID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Passport = local
				break
			}
		}
	}

	return nil
}

// SetUser of the passport to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Passport.
func (o *Passport) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error

	if insert {
		related.PassportID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"passport_id"}),
			strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.PassportID = o.ID

	}

	if o.R == nil {
		o.R = &passportR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Passport: o,
		}
	} else {
		related.R.Passport = o
	}
	return nil
}

// Passports retrieves all the records using an executor.
func Passports(mods ...qm.QueryMod) passportQuery {
	mods = append(mods, qm.From("\"passports\""))
	return passportQuery{NewQuery(mods...)}
}

// FindPassport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPassport(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Passport, error) {
	passportObj := &Passport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"passports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, passportObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from passports")
	}

	return passportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Passport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no passports provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(passportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	passportInsertCacheMut.RLock()
	cache, cached := passportInsertCache[key]
	passportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			passportAllColumns,
			passportColumnsWithDefault,
			passportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(passportType, passportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(passportType, passportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"passports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"passports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into passports")
	}

	if !cached {
		passportInsertCacheMut.Lock()
		passportInsertCache[key] = cache
		passportInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Passport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Passport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	passportUpdateCacheMut.RLock()
	cache, cached := passportUpdateCache[key]
	passportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			passportAllColumns,
			passportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update passports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"passports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, passportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(passportType, passportMapping, append(wl, passportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update passports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for passports")
	}

	if !cached {
		passportUpdateCacheMut.Lock()
		passportUpdateCache[key] = cache
		passportUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q passportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for passports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for passports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PassportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"passports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, passportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in passport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all passport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Passport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no passports provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(passportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	passportUpsertCacheMut.RLock()
	cache, cached := passportUpsertCache[key]
	passportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			passportAllColumns,
			passportColumnsWithDefault,
			passportColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			passportAllColumns,
			passportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert passports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(passportPrimaryKeyColumns))
			copy(conflict, passportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"passports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(passportType, passportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(passportType, passportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert passports")
	}

	if !cached {
		passportUpsertCacheMut.Lock()
		passportUpsertCache[key] = cache
		passportUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Passport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Passport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Passport provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), passportPrimaryKeyMapping)
	sql := "DELETE FROM \"passports\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from passports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for passports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q passportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no passportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from passports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for passports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PassportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"passports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, passportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from passport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for passports")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Passport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPassport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PassportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PassportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"passports\".* FROM \"passports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, passportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PassportSlice")
	}

	*o = slice

	return nil
}

// PassportExists checks if the Passport row exists.
func PassportExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"passports\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if passports exists")
	}

	return exists, nil
}
